{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a509bb1d4f7a07e32a936dcdb2c3d1442c1f4b6f9f3eef34d03851b9653ab4a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1062211",
    "logsBloom": "0x
    "blockHash": "0x801245fdd2b25695dc4df34181a88e7a90ca28bd1f4cc66356e9a039bf3c8d40",
    "transactionHash": "0x4a509bb1d4f7a07e32a936dcdb2c3d1442c1f4b6f9f3eef34d03851b9653ab4a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1062211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a18bcaf1a781dfa027fda86c3aa76062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  // Type Declarations\\n  using PriceConverter for uint256;\\n\\n  // State variables\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n  address private immutable i_owner;\\n  address[] private s_funders;\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // Events (we have none!)\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    // require(msg.sender == i_owner);\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  // Functions Order:\\n  //// constructor\\n  //// receive\\n  //// fallback\\n  //// external\\n  //// public\\n  //// internal\\n  //// private\\n  //// view / pure\\n\\n  constructor(address priceFeed) {\\n    s_priceFeed = AggregatorV3Interface(priceFeed);\\n    i_owner = msg.sender;\\n  }\\n\\n  /// @notice Funds our contract based on the ETH/USD price\\n  function fund() public payable {\\n    require(\\n      PriceConverter.getConversionRate(msg.value, s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    );\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    // Transfer vs call vs Send\\n    // payable(msg.sender).transfer(address(this).balance);\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    require(success);\\n  }\\n\\n  function cheaperWithdraw() public onlyOwner {\\n    address[] memory funders = s_funders;\\n    // mappings can't be in memory, sorry!\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    // payable(msg.sender).transfer(address(this).balance);\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    require(success);\\n  }\\n\\n  /** @notice Gets the amount that an address has funded\\n   *  @param fundingAddress the address of the funder\\n   *  @return the amount funded\\n   */\\n  function getAddressToAmountFunded(address fundingAddress)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[fundingAddress];\\n  }\\n\\n  function getVersion() public view returns (uint256) {\\n    return s_priceFeed.version();\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0xdf9ad266f8fce6297a61d59152fc379934d0656acdf53692f234e6a6ef8b0f99\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x899c86ea0cbf01a11639446defd36d093e94ec5aa92e085f5f172e5188a063e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135f3803806200135f83398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516111d862000187600039600081816102db0152818161046e0152818161051401528181610696015261088c01526111d86000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b4f565b6101e9565b6040516100bf9190610b95565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610b95565b60405180910390f35b3480156100ff57600080fd5b506101086102d9565b005b34801561011657600080fd5b5061011f610503565b60405161012c9190610b95565b60405180910390f35b34801561014157600080fd5b5061014a610510565b6040516101579190610bbf565b60405180910390f35b34801561016c57600080fd5b50610175610538565b6040516101829190610c39565b60405180910390f35b610193610562565b005b3480156101a157600080fd5b506101aa610694565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610c80565b610922565b6040516101e09190610bbf565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561029c57600080fd5b505afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610cc2565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040957600080828154811061038357610382610cef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040190610d4d565b915050610361565b50600067ffffffffffffffff81111561042557610424610d96565b5b6040519080825280602002602001820160405280156104535781602001602082028036833780820191505090505b5060009080519060200190610469929190610a45565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b090610df6565b60006040518083038185875af1925050503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b505090508061050057600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061059834600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610969565b10156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610e68565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e88565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610719576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561079c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610752575b5050505050905060005b81518110156108275760008282815181106107c4576107c3610cef565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081f90610d4d565b9150506107a6565b50600067ffffffffffffffff81111561084357610842610d96565b5b6040519080825280602002602001820160405280156108715781602001602082028036833780820191505090505b5060009080519060200190610887929190610a45565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ce90610df6565b60006040518083038185875af1925050503d806000811461090b576040519150601f19603f3d011682016040523d82523d6000602084013e610910565b606091505b505090508061091e57600080fd5b5050565b600080828154811061093757610936610cef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610975836109a5565b90506000670de0b6b3a7640000858361098e9190610ede565b6109989190610f67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190611010565b5050509150506402540be40081610a3d919061108b565b915050919050565b828054828255906000526020600020908101928215610abe579160200282015b82811115610abd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a65565b5b509050610acb9190610acf565b5090565b5b80821115610ae8576000816000905550600101610ad0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1c82610af1565b9050919050565b610b2c81610b11565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b600060208284031215610b6557610b64610aec565b5b6000610b7384828501610b3a565b91505092915050565b6000819050919050565b610b8f81610b7c565b82525050565b6000602082019050610baa6000830184610b86565b92915050565b610bb981610b11565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610af1565b610bda565b610af1565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610b7c565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610aec565b5b6000610ca484828501610c6b565b91505092915050565b600081519050610cbc81610c54565b92915050565b600060208284031215610cd857610cd7610aec565b5b6000610ce684828501610cad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5882610b7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8b57610d8a610d1e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de0600083610dc5565b9150610deb82610dd0565b600082019050919050565b6000610e0182610dd3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e52601b83610e0b565b9150610e5d82610e1c565b602082019050919050565b60006020820190508181036000830152610e8181610e45565b9050919050565b6000610e9382610b7c565b9150610e9e83610b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ed357610ed2610d1e565b5b828201905092915050565b6000610ee982610b7c565b9150610ef483610b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2d57610f2c610d1e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7282610b7c565b9150610f7d83610b7c565b925082610f8d57610f8c610f38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb781610f98565b8114610fc257600080fd5b50565b600081519050610fd481610fae565b92915050565b6000819050919050565b610fed81610fda565b8114610ff857600080fd5b50565b60008151905061100a81610fe4565b92915050565b600080600080600060a0868803121561102c5761102b610aec565b5b600061103a88828901610fc5565b955050602061104b88828901610ffb565b945050604061105c88828901610cad565b935050606061106d88828901610cad565b925050608061107e88828901610fc5565b9150509295509295909350565b600061109682610fda565b91506110a183610fda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e0576110df610d1e565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111d5761111c610d1e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561115a57611159610d1e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119757611196610d1e565b5b82820290509291505056fea2646970667358221220f33fc565c9c7c24b9a795d52652695b8e5699d6ef3c6ed0b9f2093612c730d9f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b4f565b6101e9565b6040516100bf9190610b95565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610b95565b60405180910390f35b3480156100ff57600080fd5b506101086102d9565b005b34801561011657600080fd5b5061011f610503565b60405161012c9190610b95565b60405180910390f35b34801561014157600080fd5b5061014a610510565b6040516101579190610bbf565b60405180910390f35b34801561016c57600080fd5b50610175610538565b6040516101829190610c39565b60405180910390f35b610193610562565b005b3480156101a157600080fd5b506101aa610694565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610c80565b610922565b6040516101e09190610bbf565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561029c57600080fd5b505afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610cc2565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040957600080828154811061038357610382610cef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040190610d4d565b915050610361565b50600067ffffffffffffffff81111561042557610424610d96565b5b6040519080825280602002602001820160405280156104535781602001602082028036833780820191505090505b5060009080519060200190610469929190610a45565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b090610df6565b60006040518083038185875af1925050503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b505090508061050057600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061059834600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610969565b10156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610e68565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e88565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610719576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561079c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610752575b5050505050905060005b81518110156108275760008282815181106107c4576107c3610cef565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081f90610d4d565b9150506107a6565b50600067ffffffffffffffff81111561084357610842610d96565b5b6040519080825280602002602001820160405280156108715781602001602082028036833780820191505090505b5060009080519060200190610887929190610a45565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ce90610df6565b60006040518083038185875af1925050503d806000811461090b576040519150601f19603f3d011682016040523d82523d6000602084013e610910565b606091505b505090508061091e57600080fd5b5050565b600080828154811061093757610936610cef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610975836109a5565b90506000670de0b6b3a7640000858361098e9190610ede565b6109989190610f67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190611010565b5050509150506402540be40081610a3d919061108b565b915050919050565b828054828255906000526020600020908101928215610abe579160200282015b82811115610abd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a65565b5b509050610acb9190610acf565b5090565b5b80821115610ae8576000816000905550600101610ad0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1c82610af1565b9050919050565b610b2c81610b11565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b600060208284031215610b6557610b64610aec565b5b6000610b7384828501610b3a565b91505092915050565b6000819050919050565b610b8f81610b7c565b82525050565b6000602082019050610baa6000830184610b86565b92915050565b610bb981610b11565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610af1565b610bda565b610af1565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610b7c565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610aec565b5b6000610ca484828501610c6b565b91505092915050565b600081519050610cbc81610c54565b92915050565b600060208284031215610cd857610cd7610aec565b5b6000610ce684828501610cad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5882610b7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d8b57610d8a610d1e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de0600083610dc5565b9150610deb82610dd0565b600082019050919050565b6000610e0182610dd3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e52601b83610e0b565b9150610e5d82610e1c565b602082019050919050565b60006020820190508181036000830152610e8181610e45565b9050919050565b6000610e9382610b7c565b9150610e9e83610b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ed357610ed2610d1e565b5b828201905092915050565b6000610ee982610b7c565b9150610ef483610b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2d57610f2c610d1e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7282610b7c565b9150610f7d83610b7c565b925082610f8d57610f8c610f38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb781610f98565b8114610fc257600080fd5b50565b600081519050610fd481610fae565b92915050565b6000819050919050565b610fed81610fda565b8114610ff857600080fd5b50565b60008151905061100a81610fe4565b92915050565b600080600080600060a0868803121561102c5761102b610aec565b5b600061103a88828901610fc5565b955050602061104b88828901610ffb565b945050604061105c88828901610cad565b935050606061106d88828901610cad565b925050608061107e88828901610fc5565b9150509295509295909350565b600061109682610fda565b91506110a183610fda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e0576110df610d1e565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111d5761111c610d1e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561115a57611159610d1e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119757611196610d1e565b5b82820290509291505056fea2646970667358221220f33fc565c9c7c24b9a795d52652695b8e5699d6ef3c6ed0b9f2093612c730d9f64736f6c63430008090033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}